import { Component, OnInit, inject } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { PlanesIntervencionService } from '../../../services/plan-intervencion.service';
import { TerritoriosService } from '../../../services/territorios.service';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { BehaviorSubject } from 'rxjs';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';

@Component({
  selector: 'app-editar-plandeintervencion',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule,MatSelectModule, MatFormFieldModule,MatButtonModule,MatIconModule],
  templateUrl: './editar-plandeintervencion.component.html',
  styleUrl: './editar-plandeintervencion.component.scss'
})
export class EditarPlandeintervencionComponent implements OnInit {
  planForm!: FormGroup;
  puedeGuardar$ = new BehaviorSubject<boolean>(false);
  private fb = inject(FormBuilder);
  private planService = inject(PlanesIntervencionService);
  private route = inject(ActivatedRoute);
  private router = inject(Router);
  planId!: number;
  evaluacion: any;
  lineas: any[] = [];

  constructor( private territorioService: TerritoriosService) {
       
  }

  ngOnInit() {
    this.planId = Number(this.route.snapshot.paramMap.get('id'));
    this.inicializarFormulario();
    this.cargarDatosPlan();
    this.loadLineas();
  }

  loadLineas() {
    this.territorioService.getLineas().subscribe({
      next: (data) => {
        console.log("‚úÖ L√≠neas cargadas:", data);
        this.lineas = data;
      },
      error: (err) => {
        console.error("‚ö†Ô∏è Error al cargar l√≠neas:", err);
        alert("‚ö†Ô∏è Error al cargar las l√≠neas de intervenci√≥n. Revisa la consola.");
      }
    });
  }

  /** üìå Inicializa el formulario vac√≠o */
  inicializarFormulario() {
    this.planForm = this.fb.group({
      id: [''],
      nombre: ['', Validators.required],
      linea_id: ['', Validators.required],
      descripcion: [''],
      evaluaciones: this.fb.array([])
    });

    this.verificarPuedeGuardar();
  }

  /** üìå Obtiene evaluaciones como FormArray */
  get evaluacionesFormArray() {
    return this.planForm.get('evaluaciones') as FormArray;
  }

  /** üìå Cargar datos del plan de intervenci√≥n */
  cargarDatosPlan() {
    this.planService.getPlanById(this.planId).subscribe({
      next: (plan) => {
        console.log("üìå Plan recibido de la API:", plan);

        this.planForm.patchValue({
          id: plan.id,
          nombre: plan.nombre,
          linea_id: plan.linea_nombre,
          descripcion: plan.descripcion
        });

        // üìå Cargar evaluaciones y preguntas asociadas
        const evaluacionesFormArray = this.evaluacionesFormArray;
        evaluacionesFormArray.clear();

        plan.evaluaciones.forEach((evaluacion: any) => {
          const evaluacionGroup = this.fb.group({
            id: [evaluacion.id],
            nombre: [evaluacion.nombre, Validators.required],
            eliminar: [false],  // üî• Aseguramos que TODAS las evaluaciones tengan este campo
            preguntas: this.fb.array([])
          });

          if (evaluacion.preguntas && Array.isArray(evaluacion.preguntas)) {
            evaluacion.preguntas.forEach((pregunta: any) => {
              (evaluacionGroup.get('preguntas') as FormArray).push(
                this.fb.group({
                  id: [pregunta.id],
                  pregunta: [pregunta.pregunta, Validators.required],
                  eliminar: [false] // üî• Tambi√©n aseguramos que las preguntas lo tengan
                })
              );
            });
          }

          evaluacionesFormArray.push(evaluacionGroup);
        });

        this.verificarPuedeGuardar();
      },
      error: (err) => console.error('‚ùå Error al cargar el plan:', err)
    });
}



  /** üìå Agregar evaluaci√≥n */
  agregarEvaluacion() {
    const nuevaEvaluacion = this.fb.group({
      id: [''],
      nombre: ['', Validators.required],
      preguntas: this.fb.array([])
    });

    this.evaluacionesFormArray.push(nuevaEvaluacion);
    this.verificarPuedeGuardar();
  }

  /** üìå Obtener preguntas de una evaluaci√≥n */
  getPreguntas(evaluacionIndex: number) {
    return this.evaluacionesFormArray.at(evaluacionIndex).get('preguntas') as FormArray;
  }

  /** üìå Agregar pregunta a una evaluaci√≥n */
  agregarPregunta(evaluacionIndex: number) {
    const preguntas = this.getPreguntas(evaluacionIndex);
    preguntas.push(this.fb.group({
      id: [''],
      pregunta: ['', Validators.required]
    }));
    this.verificarPuedeGuardar();
  }

  /** üìå Verificar si se puede guardar */
  verificarPuedeGuardar() {
    const validacion = this.planForm.valid;
    this.puedeGuardar$.next(validacion);
  }

    /** üìå Confirmar eliminaci√≥n de pregunta */
    confirmarEliminarPregunta(evaluacionIndex: number, preguntaIndex: number) {
      const confirmar = confirm('¬øSeguro que quieres eliminar esta pregunta?');
      if (confirmar) {
          const preguntas = this.getPreguntas(evaluacionIndex);
          const pregunta = preguntas.at(preguntaIndex);
          
          if (pregunta) {
              pregunta.patchValue({ eliminar: true }); // üî• Oculta el input en el frontend
              console.log(`üóëÔ∏è Pregunta ID ${pregunta.value.id} marcada para eliminar.`);
          }
      }
  }
  
  /** üìå Confirmar eliminaci√≥n de evaluaci√≥n */
  confirmarEliminarEvaluacion(index: number) {
    const confirmar = confirm('¬øSeguro que quieres eliminar esta evaluaci√≥n y todas sus preguntas?');
    if (confirmar) {
        const evaluaciones = this.evaluacionesFormArray;
        const evaluacion = evaluaciones.at(index);

        if (evaluacion) {
            evaluacion.patchValue({ eliminar: true }); // üî• Oculta la evaluaci√≥n en el frontend
            console.log(`üóëÔ∏è Evaluaci√≥n ID ${evaluacion.value.id} marcada para eliminar.`);
        }
    }
}

  eliminarEvaluacion(index: number) {
    const confirmacion = confirm('‚ö†Ô∏è ¬øEst√°s seguro de que deseas eliminar esta evaluaci√≥n y todas sus preguntas? Nota: para confirmar la eliminacion recuerda guardar cambios?');
    if (confirmacion) {
        const evaluaciones = this.evaluacionesFormArray;
        const evaluacion = evaluaciones.at(index);

        if (evaluacion?.value.id) {
            console.log(`üóëÔ∏è Marcando evaluaci√≥n ID ${evaluacion.value.id} para eliminar.`);
            evaluacion.setValue({ ...evaluacion.value, eliminar: true });

            // üìå Verificar si "eliminar": true est√° presente antes de enviar
            console.log("üìå Evaluaciones actualizadas en el formulario:", this.planForm.value.evaluaciones);
        } else {
            // ‚ùå Si no tiene ID, se elimina directamente del frontend
            evaluaciones.removeAt(index);
        }
    }
  }

  eliminarPregunta(evaluacionIndex: number, preguntaIndex: number) {
    const confirmacion = confirm('‚ö†Ô∏è ¬øEst√°s seguro de que deseas eliminar esta pregunta? Nota: para confirmar la eliminacion recuerda guardar cambios');
    if (confirmacion) {
        const preguntas = this.getPreguntas(evaluacionIndex);
        const pregunta = preguntas.at(preguntaIndex);
        
        if (pregunta?.value.id) {
            // ‚úÖ Usamos setValue en lugar de patchValue para garantizar la actualizaci√≥n
           
            pregunta.setValue({ ...pregunta.value, eliminar: true });

            // üìå Verificar si "eliminar": true est√° presente
            console.log("üìå Preguntas actualizadas en el formulario:", this.planForm.value.evaluaciones[evaluacionIndex].preguntas);
        } else {
            // ‚ùå Si no tiene ID, entonces s√≠ se puede eliminar visualmente
            preguntas.removeAt(preguntaIndex);
        }
    }
  }

  eliminarPlan() {
    const confirmacion = confirm('‚ö†Ô∏è ¬øEst√°s seguro de que deseas eliminar este Plan de Intervenci√≥n? Se eliminar√°n todas las evaluaciones y preguntas asociadas.');
    if (!confirmacion) return;
  
    this.planService.deletePlan(this.planId).subscribe({
      next: () => {
        alert('‚úÖ Plan de Intervenci√≥n eliminado correctamente');
        this.router.navigate(['/admin/gestion-plandeintervencion/listar']);
      },
      error: (error: any) => {
        alert('‚ùå Error al eliminar el plan');
        console.error('‚ùå Error:', error);
      }
    });
  }

  /** üìå Guardar cambios */
  onSubmit() {
    if (this.planForm.valid) {
        const formData = this.planForm.value;
        
        // üìå Verificar si hay elementos marcados para eliminar antes de enviarlos
        console.log("üì§ Enviando datos al backend:", JSON.stringify(formData, null, 2));

        this.planService.updatePlan(this.planId, formData).subscribe({
            next: () => {
                alert('‚úÖ Plan actualizado correctamente');
                this.router.navigate(['/admin/gestion-plandeintervencion/listar']);
            },
            error: (error: any) => {
                alert('‚ùå Error al actualizar el plan');
                console.error('‚ùå Error:', error);
            }
        });
    } else {
        alert('‚ö†Ô∏è Por favor, completa los campos obligatorios antes de guardar.');
    }
}


  /** üìå TrackBy para *ngFor */
  trackById(_index: number, item: any): string {
    return item.id;
  }
  
}
